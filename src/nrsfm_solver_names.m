function [names, ids] = nrsfm_solver_names(solvers)
  solvers_given_cameras = cell2mat(arrayfun(...
      @(camera_solver) { arrayfun(...
        @(nrsfm_solver) solver_given_cameras(camera_solver, nrsfm_solver), ...
        solvers.nrsfm_solvers_given_cameras) }, ...
      solvers.camera_solvers));

  solvers_given_full_init = cell2mat(arrayfun(...
      @(camera_solver) { cell2mat(arrayfun(...
        @(full_init_solver) { arrayfun(...
          @(nrsfm_solver) solver_given_full_init(camera_solver, ...
              full_init_solver, nrsfm_solver), ...
          solvers.nrsfm_solvers_full_init) }, ...
        solvers.full_init_solvers)) }, ...
      solvers.camera_solvers));

  names = [{solvers.nrsfm_solvers.name}, {solvers_given_cameras.name}, ...
      {solvers_given_full_init.name}];
  ids = [{solvers.nrsfm_solvers.id}, {solvers_given_cameras.id}, ...
      {solvers_given_full_init.id}];
end

function solver = solver_given_cameras(camera_solver, nrsfm_solver)
  name = sprintf('%s [%s]', nrsfm_solver.name, camera_solver.name);
  id = sprintf('%s-%s', nrsfm_solver.id, camera_solver.id);
  % Make a solver with no function.
  solver = make_solver([], name, id);
end

function solver = solver_given_full_init(camera_solver, full_init_solver, ...
    nrsfm_solver)
  name = sprintf('%s [%s, %s]', nrsfm_solver.name, camera_solver.name, ...
      full_init_solver.name);
  id = sprintf('%s-%s-%s', nrsfm_solver.id, camera_solver.id, ...
      full_init_solver.id);
  % Make a solver with no function.
  solver = make_solver([], name, id);
end
